[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// plot function 
float plot(vec2 st, float pct, float half_width){
  return  smoothstep( pct-half_width, pct, st.y) -
          smoothstep( pct, pct+half_width, st.y);
}

// rand, noise and fbm function
float rand(vec2 n) {
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 n) {
    vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 1.0;
    for (int i = 0; i < 7; i++) {
        total += noise(n) * amplitude;
        n += n;
        amplitude *= 0.5;
    }
    return total;
}


void fragment(){
	vec2 uv = UV;
	vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
	
	vec2 t ;
	float y ;
	float pct ;
	float buffer;	
	// add more lightning
	int lightning_number = 5;
	for ( int i = 0; i < lightning_number; i++){
		t = uv * vec2(2.0,1.0) + vec2(float(i), -float(i)) - TIME*3.0;
		y = fbm(t)*0.5;
		pct = plot(uv, y, 0.02);
		buffer = plot(uv, y, 0.08);
		color += pct*vec4(0.0, 0.0, 1.0, 1.0);
		color += buffer*vec4(0.2, 0, 0.8, 0.0);
	}
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="GDScript" id=3]
script/source = "extends ColorRect

var from: Vector2 setget set_from
var to: Vector2

func _ready() -> void:
	upd()

func set_from(f):
	from = f
	upd()

func upd():
	rect_size.y = 256
	rect_position = from - Vector2(0, rect_size.y / 2)
	rect_rotation = rad2deg((to - from).angle())
	rect_size.x = (to - from).length()
"

[node name="Lightning" type="ColorRect"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -344.0
rect_pivot_offset = Vector2( 0, 128 )
script = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}
